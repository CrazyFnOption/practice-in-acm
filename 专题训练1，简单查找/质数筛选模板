


//最普通的埃式筛法
memset(check, 0, sizeof(check));
int tot = 0;
for (int i = 2; i <= n; ++i)
{
    if (!check[i])
    {
        prime[tot++] = i;
    }
    // 下面其实用乘法和用加法都是一样的，而这里就是乘法的原因就在于，减少了循环次数
    // 唯一没有被优化的地方就在于 每一个数字被重复标记了很多次，而后面的欧拉筛就会限制标记次数为一次
    for (int j = i * i; j <= n; j *= i)
    {
        check[j] = 1;
    }
}


//进阶版的线性筛法

//质数数组
int prime[MAXN];
//判断每一个数 数组
int check[MAXL];

int tot = 0;
memset(check, 0, sizeof(check));
for (int i = 2; i < MAXL; ++i)
{
    if (!check[i])
    {
        prime[tot++] = i;
    }
    for (int j = 0; j < tot; ++j)
    {
        //大致意思就在于 将每一个数的与质数数组里面的数进行相乘，最后得到的结果存在check中去
        //需要注意的就是 一旦当前的数能被整除的时候 就立马退出，这样代表每一个数字都会被自己的最小质因数给整除出来。
        
        if (i * prime[j] > MAXL)
        {
            break;
        }
        check[i * prime[j]] = 1;
        if (i % prime[j] == 0)
        {
            break;
        }
    }
}
